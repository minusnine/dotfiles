package main

import (
	"code.google.com/p/go.crypto/ssh"
	"io/ioutil"
	"strings"
)

type password string

func (p password) Password(user string) (string, error) {
	return string(p), nil
}

func main() {

	f, err := ioutil.ReadFile("none")
	if err != nil {
		panic(err)
	}
	config := &ssh.ClientConfig{
		User: "ekg",
		Auth: []ssh.ClientAuth{
			ssh.ClientAuthPassword(password(strings.TrimSpace(string(f)))),
		},
	}
	client, err := ssh.Dial("tcp", "127.0.0.1:8080", config)
	if err != nil {
		panic("Failed to dial: " + err.Error())
	}
	defer client.Close()

	session, err := client.NewSession()
	if err != nil {
		panic("Failed to create session: " + err.Error())
	}
	defer session.Close()

	sftp, err := session.NewSFTP()
	if err != nil {
		panic("Failed to create SFTP session: " + err.Error())
	}

	sftp.Stat("/etc/passwd")
}
